// lib/vulnerabilityPipeline.ts
// ==========================================================================
// ENHANCED VULNERABILITY ASSESSMENT PIPELINE - RESTORED PROPER ARCHITECTURE
// ==========================================================================

import { calculateConfidenceGap } from './archetypeCalculator';
import { generateEducationalContent, PersonaEducationContent } from './personaEducator';
import { selectPersonasForUser, analyzePersonaSelection } from './personaSelector';
import {
  ArchetypeResults,
  PersonaSelection,
  ExtendedAssessmentResult,
  ScoreData,
  ExtendedUserAnswer,
} from './types';

// ==========================================================================
// VULNERABILITY ASSESSMENT TYPES (ENHANCED FOR STORE COMPATIBILITY)
// ==========================================================================

export interface VulnerabilityAssessment {
  personaSelection: PersonaSelection;
  educationalContent: PersonaEducationContent;
  selectionAnalysis: PersonaSelectionAnalysis;
  riskProfile: RiskProfile;
  actionablePlan: ActionablePlan;
  confidenceGap: ConfidenceGapAnalysis;
}

export interface PersonaSelectionAnalysis {
  totalPersonasSelected: number;
  riskDistribution: {
    high: number;
    medium: number;
    low: number;
  };
  dominantManipulationTypes: string[];
  vulnerabilityThemes: string[];
}

export interface RiskProfile {
  overallRiskLevel: 'high' | 'medium' | 'low';
  riskScore: number; // 0-100
  vulnerabilityFactors: VulnerabilityFactor[];
  protectiveFactors: ProtectiveFactor[];
  riskScenarios: RiskScenario[];
}

export interface VulnerabilityFactor {
  type: 'archetype' | 'personality_clarity' | 'personality_complexity' | 'emotional_prioritization';
  severity: 'high' | 'medium' | 'low';
  description: string;
  impact: string;
}

export interface ProtectiveFactor {
  type: 'inherent_traits' | 'analytical_thinking' | 'independence' | 'education';
  strength: 'high' | 'medium' | 'low';
  description: string;
  application: string;
}

export interface RiskScenario {
  personaType: string;
  likelihood: 'high' | 'medium' | 'low';
  situation: string;
  warningSign: string;
  preventionStrategy: string;
}

export interface ActionablePlan {
  immediateActions: string[];
  ongoingPractices: string[];
  relationshipGuidelines: string[];
  redFlagChecklist: string[];
  emergencySigns: string[];
  resourceLinks: ResourceLink[];
}

export interface ResourceLink {
  title: string;
  description: string;
  url: string;
  type: 'article' | 'video' | 'tool' | 'support';
}

export interface ConfidenceGapAnalysis {
  gap: number;
  gapType: 'large_gap' | 'medium_gap' | 'small_gap';
  primaryArchetype: string;
  secondaryArchetype?: string;
  interpretation: string;
}

// ==========================================================================
// MAIN VULNERABILITY ASSESSMENT PIPELINE (RESTORED ARCHITECTURE)
// ==========================================================================

/**
 * Main vulnerability assessment pipeline - uses specialized files properly
 * Updated to work with enhanced store system while maintaining architecture
 */
export const generateVulnerabilityAssessment = (
  answers: ExtendedUserAnswer[],
  archetypeResults: ArchetypeResults
): VulnerabilityAssessment => {
  try {
    console.log('=== VULNERABILITY ASSESSMENT PIPELINE ===');
    console.log('Archetype results:', archetypeResults?.topMatches?.length);

    // GUARD CLAUSE: Validate archetypeResults
    if (!archetypeResults?.topMatches || archetypeResults.topMatches.length === 0) {
      console.error('generateVulnerabilityAssessment: Invalid archetype results');
      return generateFallbackAssessment(archetypeResults);
    }

    // Phase 1: Calculate confidence gap (using archetypeCalculator.ts)
    const rawConfidenceGap = calculateConfidenceGap(archetypeResults.topMatches);
    console.log('Raw confidence gap:', rawConfidenceGap);

    const confidenceGap = normalizeConfidenceGap(rawConfidenceGap);
    console.log('Normalized confidence gap:', confidenceGap);

    // Phase 2: Select personas (using personaSelector.ts)
    console.log('Calling selectPersonasForUser...');
    const personaSelection = selectPersonasForUser(
      archetypeResults.topMatches,
      confidenceGap.gap,
      confidenceGap.gapType
    );
    console.log('Persona selection result:', personaSelection);

    // Phase 3: Generate educational content (using personaEducator.ts)
    const educationalContent = generateEducationalContent(personaSelection);

    // Phase 4: Analyze persona selection (using personaSelector.ts)
    const selectionAnalysis = analyzePersonaSelection(personaSelection);

    // Phase 5: Generate risk profile (enhanced local logic)
    const riskProfile = generateRiskProfile(personaSelection, archetypeResults, answers);

    // Phase 6: Create actionable plan (enhanced local logic)
    const actionablePlan = generateActionablePlan(educationalContent, riskProfile);

    return {
      personaSelection,
      educationalContent,
      selectionAnalysis,
      riskProfile,
      actionablePlan,
      confidenceGap,
    };
  } catch (error) {
    console.error('Error in vulnerability assessment pipeline:', error);
    return generateFallbackAssessment(archetypeResults);
  }
};

// ==========================================================================
// COMPATIBILITY BRIDGE FUNCTIONS
// ==========================================================================

/**
 * Normalize confidence gap from archetypeCalculator to our format
 */
const normalizeConfidenceGap = (rawGap: {
  gap: number;
  gapType: 'largeGap' | 'mediumGap' | 'smallGap';
  primaryArchetype?: string;
  secondaryArchetype?: string;
}): ConfidenceGapAnalysis => {
  // Convert gapType format from old to new
  const gapTypeMap = {
    largeGap: 'large_gap' as const,
    mediumGap: 'medium_gap' as const,
    smallGap: 'small_gap' as const,
  };

  const gapType = gapTypeMap[rawGap.gapType] || 'small_gap';

  let interpretation: string;
  switch (gapType) {
    case 'large_gap':
      interpretation = `Strong ${rawGap.primaryArchetype} identity with clear vulnerability patterns`;
      break;
    case 'medium_gap':
      interpretation = `Moderate ${rawGap.primaryArchetype} traits with ${rawGap.secondaryArchetype} influences`;
      break;
    case 'small_gap':
      interpretation = `Mixed traits requiring broader vulnerability awareness`;
      break;
  }

  return {
    gap: rawGap.gap,
    gapType,
    primaryArchetype: rawGap.primaryArchetype || 'Unknown',
    secondaryArchetype: rawGap.secondaryArchetype,
    interpretation,
  };
};

/**
 * Map our gap type format to personaSelector format
 */
const mapGapTypeToSelector = (
  gapType: 'large_gap' | 'medium_gap' | 'small_gap'
): 'large_gap' | 'medium_gap' | 'small_gap' => {
  // No conversion needed - both systems now use the same format
  return gapType;
};

// ==========================================================================
// ENHANCED ANALYSIS FUNCTIONS (BUILT ON IMPORTED LOGIC)
// ==========================================================================

/**
 * Generate comprehensive risk profile using imported persona analysis
 */
export const generateRiskProfile = (
  personaSelection: PersonaSelection,
  archetypeResults: ArchetypeResults,
  answers: ExtendedUserAnswer[]
): RiskProfile => {
  // Calculate overall risk level based on persona selection
  const overallRiskLevel = calculateOverallRiskLevel(personaSelection);

  // Calculate numerical risk score
  const riskScore = calculateRiskScore(personaSelection, archetypeResults);

  // Identify vulnerability factors
  const vulnerabilityFactors = identifyVulnerabilityFactors(personaSelection, archetypeResults);

  // Identify protective factors
  const protectiveFactors = identifyProtectiveFactors(personaSelection, archetypeResults);

  // Generate risk scenarios
  const riskScenarios = generateRiskScenarios(personaSelection);

  return {
    overallRiskLevel,
    riskScore,
    vulnerabilityFactors,
    protectiveFactors,
    riskScenarios,
  };
};

/**
 * Calculate overall risk level based on persona selection
 */
const calculateOverallRiskLevel = (selection: PersonaSelection): 'high' | 'medium' | 'low' => {
  const { selectedPersonas } = selection;
  const highRiskCount = selectedPersonas.filter(p => p.riskLevel === 'high').length;
  const totalPersonas = selectedPersonas.length;

  if (totalPersonas === 0) return 'low';

  const highRiskRatio = highRiskCount / totalPersonas;

  if (highRiskRatio >= 0.6) return 'high';
  if (highRiskRatio >= 0.3) return 'medium';
  return 'low';
};

/**
 * Calculate numerical risk score (0-100)
 */
const calculateRiskScore = (
  selection: PersonaSelection,
  archetypeResults: ArchetypeResults
): number => {
  const { selectedPersonas, confidenceGap } = selection;

  // Base score from risk levels
  const riskWeights = { high: 30, medium: 20, low: 10 };
  const baseScore = selectedPersonas.reduce(
    (score, persona) => score + riskWeights[persona.riskLevel],
    0
  );

  // Adjust for confidence gap (higher gap = more focused risk)
  const confidenceAdjustment = confidenceGap > 20 ? 10 : confidenceGap > 10 ? 5 : 0;

  // Normalize to 0-100 scale
  const maxPossible = selectedPersonas.length * 30 + 10;
  const normalizedScore = Math.min(100, ((baseScore + confidenceAdjustment) / maxPossible) * 100);

  return Math.round(normalizedScore);
};

/**
 * Identify vulnerability factors based on archetype and persona analysis
 */
const identifyVulnerabilityFactors = (
  selection: PersonaSelection,
  archetypeResults: ArchetypeResults
): VulnerabilityFactor[] => {
  const factors: VulnerabilityFactor[] = [];

  // Primary archetype vulnerability
  factors.push({
    type: 'archetype',
    severity: 'medium',
    description: `${selection.primaryArchetype} personality traits create specific vulnerability patterns`,
    impact: 'Makes you more susceptible to certain manipulation tactics',
  });

  // Confidence-based vulnerabilities
  if (selection.confidenceGap < 10) {
    factors.push({
      type: 'personality_complexity',
      severity: 'medium',
      description: 'Mixed personality traits create multiple vulnerability points',
      impact: 'Manipulators may use different tactics depending on which traits they target',
    });
  }

  // Add persona-specific vulnerabilities
  const highRiskPersonas = selection.selectedPersonas.filter(p => p.riskLevel === 'high');
  if (highRiskPersonas.length > 0) {
    factors.push({
      type: 'emotional_prioritization',
      severity: 'high',
      description: `High vulnerability to ${highRiskPersonas.length} specific manipulation types`,
      impact: 'Increased risk of falling victim to targeted manipulation tactics',
    });
  }

  return factors;
};

/**
 * Identify protective factors based on archetype strengths
 */
const identifyProtectiveFactors = (
  selection: PersonaSelection,
  archetypeResults: ArchetypeResults
): ProtectiveFactor[] => {
  const factors: ProtectiveFactor[] = [];

  // Education-based protection
  factors.push({
    type: 'education',
    strength: 'high',
    description: 'Awareness of vulnerability patterns significantly reduces risk',
    application: 'Use this knowledge to evaluate new relationships and situations',
  });

  // Archetype-specific strengths
  const archetypeStrengths: Record<string, Omit<ProtectiveFactor, 'type'>> = {
    Peacemaker: {
      strength: 'high',
      description: "Strong empathy helps you understand others' motivations",
      application: "Trust your emotional instincts about people's true intentions",
    },
    Achiever: {
      strength: 'high',
      description: 'Goal-oriented thinking helps you evaluate relationships logically',
      application: 'Apply your analytical skills to relationship red flags',
    },
    Caregiver: {
      strength: 'medium',
      description: 'Natural ability to sense when someone genuinely needs help vs manipulation',
      application: 'Distinguish between authentic requests and manipulation attempts',
    },
    Leader: {
      strength: 'high',
      description: 'Natural confidence and boundary-setting abilities',
      application: 'Use your leadership skills to maintain control in relationships',
    },
  };

  const archetypeStrength = archetypeStrengths[selection.primaryArchetype];
  if (archetypeStrength) {
    factors.push({
      type: 'inherent_traits',
      ...archetypeStrength,
    });
  }

  return factors;
};

/**
 * Generate realistic risk scenarios based on selected personas
 */
const generateRiskScenarios = (selection: PersonaSelection): RiskScenario[] => {
  return selection.selectedPersonas.slice(0, 3).map(persona => ({
    personaType: persona.persona,
    likelihood: persona.riskLevel === 'high' ? 'high' : 'medium',
    situation: `You meet someone who gradually shows signs of ${persona.persona.toLowerCase()} behavior`,
    warningSign: `They consistently use ${persona.psychologicalTactics[0]?.toLowerCase() || 'manipulation tactics'} to get their way`,
    preventionStrategy: `Recognize early signs and maintain firm boundaries against ${persona.persona.toLowerCase()} tactics`,
  }));
};

/**
 * Generate actionable protection plan using educational content
 */
export const generateActionablePlan = (
  educationalContent: PersonaEducationContent,
  riskProfile: RiskProfile
): ActionablePlan => {
  const immediateActions: string[] = [
    'Trust your instincts - if something feels wrong, it probably is',
    "Set clear boundaries about what behavior you will and won't accept",
    "Keep your support network strong - don't let anyone isolate you",
  ];

  const ongoingPractices: string[] = [
    'Regular check-ins with trusted friends about your relationships',
    'Maintain your independence and personal interests',
    'Continue learning about healthy relationship dynamics',
  ];

  const relationshipGuidelines: string[] = [
    'Healthy relationships feel peaceful, not constantly dramatic',
    'Real love is consistent, not hot and cold',
    'Your partner should enhance your life, not drain it',
  ];

  const redFlagChecklist: string[] = [
    'They make you feel like you\'re "walking on eggshells"',
    'You find yourself making excuses for their behavior to others',
    'They isolate you from friends and family over time',
  ];

  // Safely add persona-specific red flags if available
  if (educationalContent?.personaEducation && educationalContent.personaEducation.length > 0) {
    educationalContent.personaEducation.forEach(persona => {
      if (persona?.educationalSections?.recognitionSigns) {
        redFlagChecklist.push(...persona.educationalSections.recognitionSigns.slice(0, 2));
      }
    });
  }

  const emergencySigns: string[] = [
    'They threaten you or people you care about',
    'You feel afraid of their reactions',
    'They try to control your finances, work, or basic freedoms',
    'Physical violence or threats of violence occur',
  ];

  const resourceLinks: ResourceLink[] = [
    {
      title: 'National Domestic Violence Hotline',
      description: '24/7 confidential support',
      url: 'https://www.thehotline.org',
      type: 'support',
    },
  ];

  return {
    immediateActions: immediateActions.slice(0, 5),
    ongoingPractices: ongoingPractices.slice(0, 5),
    relationshipGuidelines: relationshipGuidelines.slice(0, 5),
    redFlagChecklist: redFlagChecklist.slice(0, 8),
    emergencySigns,
    resourceLinks,
  };
};

/**
 * Generate fallback assessment when main pipeline fails - FIXED VERSION
 */
const generateFallbackAssessment = (
  archetypeResults?: ArchetypeResults
): VulnerabilityAssessment => {
  const primaryArchetype = archetypeResults?.topMatches?.[0]?.archetype?.name || 'Unknown';

  return {
    personaSelection: {
      selectedPersonas: [],
      selectionReason: 'small_gap',
      confidenceGap: 0,
      primaryArchetype,
    },
    educationalContent: {
      overviewMessage: `Based on your ${primaryArchetype} profile, we're still processing your personalized vulnerability assessment. General relationship awareness applies to everyone.`,
      personaEducation: [],
      keyRedFlags: [
        "They make you feel like you're constantly walking on eggshells",
        'Your friends and family express concern about the relationship',
        'You find yourself making excuses for their behavior',
        'They try to isolate you from your support network',
      ],
      protectionStrategies: [
        'Trust your instincts about people and situations',
        'Maintain strong connections with friends and family',
        'Set and enforce clear personal boundaries',
        'Pay attention to how someone treats others, not just you',
      ],
      confidenceMessage: 'These are general guidelines that apply regardless of personality type.',
    },
    selectionAnalysis: {
      totalPersonasSelected: 0,
      riskDistribution: { high: 0, medium: 0, low: 0 },
      dominantManipulationTypes: [],
      vulnerabilityThemes: [],
    },
    riskProfile: {
      overallRiskLevel: 'low',
      riskScore: 0,
      vulnerabilityFactors: [],
      protectiveFactors: [
        {
          type: 'education',
          strength: 'high',
          description: 'Awareness of manipulation tactics provides protection',
          application: 'Use this knowledge to recognize red flags early',
        },
      ],
      riskScenarios: [],
    },
    actionablePlan: {
      immediateActions: [
        'Trust your instincts about people and relationships',
        'Maintain strong connections with trusted friends and family',
        'Set clear boundaries about acceptable behavior',
      ],
      ongoingPractices: [
        'Regular check-ins about your relationships with trusted friends',
        'Continue learning about healthy relationship dynamics',
        'Maintain your independence and personal interests',
      ],
      relationshipGuidelines: [
        'Healthy relationships should feel peaceful, not constantly dramatic',
        'Real love is consistent and respectful, not hot and cold',
        'Your partner should enhance your life, not drain your energy',
      ],
      redFlagChecklist: [
        "They make you feel like you're walking on eggshells",
        'You find yourself making excuses for their behavior',
        'They try to isolate you from friends and family',
        'They have extreme mood swings or unpredictable reactions',
      ],
      emergencySigns: [
        'Any threats of violence or actual physical violence',
        'You feel genuinely afraid of their reactions',
        'They try to control your finances, work, or basic freedoms',
      ],
      resourceLinks: [
        {
          title: 'National Domestic Violence Hotline',
          description: '24/7 confidential support and resources',
          url: 'https://www.thehotline.org',
          type: 'support',
        },
      ],
    },
    confidenceGap: {
      gap: 0,
      gapType: 'small_gap',
      primaryArchetype,
      interpretation: 'General relationship awareness recommendations',
    },
  };
};

// ==========================================================================
// FALLBACK SYSTEM
// ==========================================================================

/**
 * Generate fallback assessment when specialized components fail
 */
// const generateFallbackAssessment = (
//   archetypeResults: ArchetypeResults
// ): VulnerabilityAssessment => {
//   const fallbackPersonaSelection: PersonaSelection = {
//     selectedPersonas: [],
//     selectionReason: 'small_gap',
//     confidenceGap: 0,
//     primaryArchetype: 'Unknown',
//   };

//   return {
//     personaSelection: fallbackPersonaSelection,
//     educationalContent: {
//       overviewMessage: 'Assessment data incomplete. Please retake the assessment.',
//       personaEducation: [],
//       keyRedFlags: [],
//       protectionStrategies: [],
//       confidenceMessage: 'Assessment incomplete',
//     },
//     selectionAnalysis: {
//       totalPersonasSelected: 0,
//       riskDistribution: { high: 0, medium: 0, low: 0 },
//       dominantManipulationTypes: [],
//       vulnerabilityThemes: [],
//     },
//     riskProfile: {
//       overallRiskLevel: 'low',
//       riskScore: 0,
//       vulnerabilityFactors: [],
//       protectiveFactors: [],
//       riskScenarios: [],
//     },
//     actionablePlan: {
//       immediateActions: ['Retake the assessment for accurate results'],
//       ongoingPractices: [],
//       relationshipGuidelines: [],
//       redFlagChecklist: [],
//       emergencySigns: [],
//       resourceLinks: [],
//     },
//     confidenceGap: {
//       gap: 0,
//       gapType: 'small_gap',
//       primaryArchetype: 'Unknown',
//       interpretation: 'Assessment incomplete',
//     },
//   };
// };
