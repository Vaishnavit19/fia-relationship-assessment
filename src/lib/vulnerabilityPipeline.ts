// lib/vulnerabilityPipeline.ts
// ==========================================================================
// PHASE 2 STEP 6: COMPLETE VULNERABILITY ASSESSMENT PIPELINE (Files 4+5)
// ==========================================================================

import { generateEducationalContent, PersonaEducationContent } from './personaEducator';
import { selectPersonasForUser, analyzePersonaSelection } from './personaSelector';
import { ArchetypeResults, PersonaSelection, ExtendedAssessmentResult, ScoreData } from './types';

// ==========================================================================
// COMPLETE VULNERABILITY ASSESSMENT PIPELINE
// ==========================================================================

/**
 * Main vulnerability assessment pipeline combining persona selection and education
 */
export const generateVulnerabilityAssessment = (
  archetypeResults: ArchetypeResults
): VulnerabilityAssessment => {
  // Phase 2 Step 4: Persona Selection (File 5)
  const confidenceGap = calculateConfidenceGap(archetypeResults.topMatches);
  const personaSelection = selectPersonasForUser(
    archetypeResults.topMatches,
    confidenceGap.gap,
    confidenceGap.gapType
  );

  // Phase 2 Step 5: Educational Content (File 4)
  const educationalContent = generateEducationalContent(personaSelection);

  // Combined Analysis
  const selectionAnalysis = analyzePersonaSelection(personaSelection);
  const riskProfile = generateRiskProfile(personaSelection, archetypeResults);
  const actionablePlan = generateActionablePlan(educationalContent, riskProfile);

  return {
    personaSelection,
    educationalContent,
    selectionAnalysis,
    riskProfile,
    actionablePlan,
    confidenceGap,
  };
};

/**
 * Calculate confidence gap from archetype matches
 */
export const calculateConfidenceGap = (
  matches: ArchetypeResults['topMatches']
): {
  gap: number;
  gapType: 'largeGap' | 'mediumGap' | 'smallGap';
} => {
  if (matches.length < 2) {
    return { gap: 0, gapType: 'smallGap' };
  }

  const gap = matches[0].confidence - matches[1].confidence;

  let gapType: 'largeGap' | 'mediumGap' | 'smallGap';
  if (gap > 20) {
    gapType = 'largeGap';
  } else if (gap > 10) {
    gapType = 'mediumGap';
  } else {
    gapType = 'smallGap';
  }

  return { gap, gapType };
};

// ==========================================================================
// RISK PROFILING SYSTEM
// ==========================================================================

/**
 * Generate comprehensive risk profile
 */
export const generateRiskProfile = (
  selection: PersonaSelection,
  archetypeResults: ArchetypeResults
): RiskProfile => {
  const overallRiskLevel = calculateOverallRiskLevel(selection);
  const vulnerabilityFactors = identifyVulnerabilityFactors(selection, archetypeResults);
  const protectiveFactors = identifyProtectiveFactors(selection, archetypeResults);
  const riskScenarios = generateRiskScenarios(selection);

  return {
    overallRiskLevel,
    vulnerabilityFactors,
    protectiveFactors,
    riskScenarios,
    riskScore: calculateRiskScore(selection, archetypeResults),
  };
};

/**
 * Calculate overall risk level
 */
export const calculateOverallRiskLevel = (
  selection: PersonaSelection
): 'high' | 'medium' | 'low' => {
  const highRiskCount = selection.selectedPersonas.filter(
    persona =>
      determinePersonaRiskForArchetype(persona.id, selection.primaryArchetype.archetype.id) ===
      'high'
  ).length;

  const totalPersonas = selection.selectedPersonas.length;
  const highRiskRatio = highRiskCount / totalPersonas;

  if (highRiskRatio > 0.6) return 'high';
  if (highRiskRatio > 0.3) return 'medium';
  return 'low';
};

/**
 * Identify vulnerability factors
 */
export const identifyVulnerabilityFactors = (
  selection: PersonaSelection,
  archetypeResults: ArchetypeResults
): VulnerabilityFactor[] => {
  const factors: VulnerabilityFactor[] = [];

  // Primary archetype vulnerabilities
  const primaryArchetype = selection.primaryArchetype;
  factors.push({
    type: 'archetype',
    severity: 'medium',
    description: `${primaryArchetype.archetype.name} traits create specific vulnerability patterns`,
    details:
      primaryArchetype.archetype.vulnerabilities?.slice(0, 3).map(v => v.vulnerability) || [],
  });

  // Confidence-based vulnerabilities
  if (selection.confidenceGap > 20) {
    factors.push({
      type: 'personality_clarity',
      severity: 'medium',
      description: 'Pronounced personality traits make manipulation patterns more predictable',
      details: [
        'Manipulators can easily identify your type',
        'Targeted approaches more likely to succeed',
      ],
    });
  } else if (selection.confidenceGap < 10) {
    factors.push({
      type: 'personality_complexity',
      severity: 'low',
      description: 'Complex personality blend creates varied vulnerability patterns',
      details: [
        'Multiple archetype traits provide natural diversity',
        'Harder for manipulators to pin down your type',
      ],
    });
  }

  // Score-based vulnerabilities
  const userScores = archetypeResults.userScores;
  if (userScores.emotional > userScores.logical + userScores.exploratory) {
    factors.push({
      type: 'emotional_prioritization',
      severity: 'medium',
      description: 'Strong emotional focus can be exploited by emotional manipulators',
      details: [
        "May prioritize partner's feelings over red flag recognition",
        'Vulnerable to emotional overwhelm tactics',
      ],
    });
  }

  return factors;
};

/**
 * Identify protective factors
 */
export const identifyProtectiveFactors = (
  selection: PersonaSelection,
  archetypeResults: ArchetypeResults
): ProtectiveFactor[] => {
  const factors: ProtectiveFactor[] = [];

  // Archetype-based protections
  const primaryArchetype = selection.primaryArchetype;
  const archetypeProtections = getArchetypeProtectiveTraits(primaryArchetype.archetype.id);
  if (archetypeProtections.length > 0) {
    factors.push({
      type: 'inherent_traits',
      strength: 'medium',
      description: `Your ${primaryArchetype.archetype.name} traits provide natural protection`,
      details: archetypeProtections,
    });
  }

  // Score-based protections
  const userScores = archetypeResults.userScores;
  if (userScores.logical >= 6) {
    factors.push({
      type: 'analytical_thinking',
      strength: 'high',
      description: 'Strong logical reasoning helps identify manipulation tactics',
      details: [
        'Can analyze relationship patterns objectively',
        'Less likely to be swayed by emotional manipulation alone',
      ],
    });
  }

  if (userScores.exploratory >= 6) {
    factors.push({
      type: 'independence',
      strength: 'medium',
      description: 'Exploratory nature maintains independence in relationships',
      details: [
        'Less likely to become completely dependent',
        'Maintains outside interests and perspectives',
      ],
    });
  }

  // Awareness as protection
  factors.push({
    type: 'education',
    strength: 'high',
    description: 'Awareness of these patterns significantly reduces vulnerability',
    details: [
      'Knowledge of manipulation tactics provides immunity',
      'Can recognize patterns early in relationships',
      'Educated choices lead to healthier relationships',
    ],
  });

  return factors;
};

/**
 * Get protective traits for archetype
 */
export const getArchetypeProtectiveTraits = (archetypeId: string): string[] => {
  const protections: Record<string, string[]> = {
    intellectual: [
      'Critical thinking skills',
      'Question inconsistencies',
      'Research-oriented approach',
    ],
    achiever: ['Goal-focused mindset', 'Results-oriented evaluation', 'High standards'],
    leader: [
      'Natural authority awareness',
      'Power dynamic sensitivity',
      'Decision-making experience',
    ],
    explorer: ['Independence valued', 'Diverse experiences', 'Adaptability'],
    peacemaker: [
      'Conflict awareness',
      'Harmony-seeking can detect discord',
      'Intuitive about others',
    ],
    dreamer: ['Idealistic standards', 'Vision-focused', 'Creative problem-solving'],
    rebel: ['Authority questioning', 'Non-conformist thinking', 'Authenticity valued'],
    caregiver: [
      'Empathy provides insight',
      'Nurturing instincts detect genuine need',
      'Protective of others',
    ],
  };

  return protections[archetypeId] || [];
};

/**
 * Generate risk scenarios
 */
export const generateRiskScenarios = (selection: PersonaSelection): RiskScenario[] => {
  const scenarios: RiskScenario[] = [];

  selection.selectedPersonas.slice(0, 3).forEach((persona, index) => {
    scenarios.push({
      persona: persona.persona,
      likelihood: index === 0 ? 'high' : index === 1 ? 'medium' : 'low',
      scenario: `Dating someone like ${persona.characters[0]}: ${persona.why}`,
      warningSign: persona.plotTwist,
      outcome: persona.blindSpot,
      prevention: `Remember: ${persona.punchline}`,
    });
  });

  return scenarios;
};

/**
 * Calculate numerical risk score
 */
export const calculateRiskScore = (
  selection: PersonaSelection,
  archetypeResults: ArchetypeResults
): number => {
  let score = 50; // Base score

  // Adjust for confidence gap
  if (selection.confidenceGap > 20) score += 10;
  else if (selection.confidenceGap < 10) score -= 5;

  // Adjust for persona risk levels
  const highRiskCount = selection.selectedPersonas.filter(
    persona =>
      determinePersonaRiskForArchetype(persona.id, selection.primaryArchetype.archetype.id) ===
      'high'
  ).length;

  score += highRiskCount * 5;

  // Adjust for protective factors (logical reasoning)
  if (archetypeResults.userScores.logical >= 8) score -= 10;
  if (archetypeResults.userScores.exploratory >= 8) score -= 5;

  return Math.max(0, Math.min(100, score));
};

// ==========================================================================
// ACTIONABLE PLAN GENERATION
// ==========================================================================

/**
 * Generate actionable protection plan
 */
export const generateActionablePlan = (
  educationalContent: ReturnType<typeof generateEducationalContent>,
  riskProfile: RiskProfile
): ActionablePlan => {
  return {
    immediateActions: generateImmediateActions(educationalContent, riskProfile),
    ongoingPractices: generateOngoingPractices(educationalContent, riskProfile),
    relationshipGuidelines: generateRelationshipGuidelines(educationalContent),
    redFlagChecklist: educationalContent.keyRedFlags,
    emergencySigns: generateEmergencySigns(riskProfile),
  };
};

/**
 * Generate immediate actions
 */
export const generateImmediateActions = (
  educationalContent: ReturnType<typeof generateEducationalContent>,
  riskProfile: RiskProfile
): string[] => {
  const actions = [
    'Share these insights with a trusted friend who can help you spot patterns',
    'Review your current and past relationships for these patterns',
    'Practice saying no in low-stakes situations to build boundary-setting skills',
  ];

  if (riskProfile.overallRiskLevel === 'high') {
    actions.unshift('If currently in a relationship, carefully evaluate it against these patterns');
  }

  return actions;
};

/**
 * Generate ongoing practices
 */
export const generateOngoingPractices = (
  educationalContent: ReturnType<typeof generateEducationalContent>,
  riskProfile: RiskProfile
): string[] => {
  return [
    'Take time between dates to process feelings and observations',
    'Maintain friendships and outside interests regardless of relationship status',
    'Practice self-reflection: "How do I feel after spending time with this person?"',
    "Trust your instincts even when you can't articulate why something feels off",
    'Regularly check in with yourself: "Am I compromising my values or boundaries?"',
  ];
};

/**
 * Generate relationship guidelines
 */
export const generateRelationshipGuidelines = (
  educationalContent: ReturnType<typeof generateEducationalContent>
): string[] => {
  return [
    'Healthy relationships should enhance your life, not consume it',
    'Both partners should have friends, interests, and goals outside the relationship',
    'Conflict resolution should leave both people feeling heard and respected',
    'Love should feel peaceful and secure, not anxious and overwhelming',
    'Your partner should support your growth, not try to change or fix you',
    'Physical and emotional intimacy should develop gradually and consensually',
  ];
};

/**
 * Generate emergency warning signs
 */
export const generateEmergencySigns = (riskProfile: RiskProfile): string[] => {
  return [
    '🆘 Threats of self-harm or suicide to control your behavior',
    '🆘 Isolation from friends, family, or support systems',
    '🆘 Any form of physical violence or threats',
    '🆘 Financial control or abuse',
    '🆘 Monitoring your communications, location, or activities',
    '🆘 Extreme jealousy or possessiveness',
  ];
};

// ==========================================================================
// HELPER FUNCTIONS
// ==========================================================================

/**
 * Determine persona risk level for specific archetype
 */
export const determinePersonaRiskForArchetype = (
  personaId: string,
  archetypeId: string
): 'high' | 'medium' | 'low' | null => {
  // This would integrate with persona mapping data
  // For now, return medium as default
  return 'medium';
};

// ==========================================================================
// TYPE DEFINITIONS
// ==========================================================================

export interface VulnerabilityAssessment {
  personaSelection: PersonaSelection;
  educationalContent: ReturnType<typeof generateEducationalContent>;
  selectionAnalysis: ReturnType<typeof analyzePersonaSelection>;
  riskProfile: RiskProfile;
  actionablePlan: ActionablePlan;
  confidenceGap: { gap: number; gapType: 'largeGap' | 'mediumGap' | 'smallGap' };
}

export interface RiskProfile {
  overallRiskLevel: 'high' | 'medium' | 'low';
  vulnerabilityFactors: VulnerabilityFactor[];
  protectiveFactors: ProtectiveFactor[];
  riskScenarios: RiskScenario[];
  riskScore: number; // 0-100
}

export interface VulnerabilityFactor {
  type: 'archetype' | 'personality_clarity' | 'personality_complexity' | 'emotional_prioritization';
  severity: 'high' | 'medium' | 'low';
  description: string;
  details: string[];
}

export interface ProtectiveFactor {
  type: 'inherent_traits' | 'analytical_thinking' | 'independence' | 'education';
  strength: 'high' | 'medium' | 'low';
  description: string;
  details: string[];
}

export interface RiskScenario {
  persona: string;
  likelihood: 'high' | 'medium' | 'low';
  scenario: string;
  warningSign: string;
  outcome: string;
  prevention: string;
}

export interface ActionablePlan {
  immediateActions: string[];
  ongoingPractices: string[];
  relationshipGuidelines: string[];
  redFlagChecklist: string[];
  emergencySigns: string[];
}
