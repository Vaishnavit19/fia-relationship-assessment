// src/components/pages/VulnerabilityCardsPage/VulnerabilityCardsPage.tsx
'use client';

import {
  Shield,
  AlertTriangle,
  Eye,
  Lightbulb,
  Users,
  Film,
  Heart,
  Brain,
  Target,
  ChevronLeft,
  ChevronRight,
  Info,
  BookOpen,
  CheckCircle,
  XCircle,
  Home,
  Download,
  RefreshCw,
} from 'lucide-react';
import { useRouter } from 'next/navigation';
import React, { useEffect, useState } from 'react';

import { generateEducationalContent } from '../../../lib/personaEducator';
import {
  useEnhancedAssessmentData,
  useEnhancedAssessmentActions,
  useEnhancedAssessmentResults,
} from '../../../lib/store';
import { PersonaCard, PersonaEducationContent } from '../../../lib/types';
import { Button } from '../../ui/Button';
import { Card } from '../../ui/Card';
import { LoadingSpinner } from '../../ui/LoadingSpinner';
import PageLayout from '../../ui/PageLayout';

import styles from './VulnerabilityCardsPage.module.scss';

export interface VulnerabilityCardsPageProps {
  /** Debug mode for development */
  debug?: boolean;
  /** Show educational content by default */
  expandedByDefault?: boolean;
  /** Custom styling */
  className?: string;
}

export const VulnerabilityCardsPage: React.FC<VulnerabilityCardsPageProps> = ({
  debug = false,
  expandedByDefault = false,
  className = '',
}) => {
  const router = useRouter();

  // ==========================================================================
  // ENHANCED STORE STATE
  // ==========================================================================

  const { isComplete } = useEnhancedAssessmentData();
  const { resetAssessment } = useEnhancedAssessmentActions();
  const { scores, answers, archetypeResults, vulnerabilityAssessment } =
    useEnhancedAssessmentResults();

  // ==========================================================================
  // LOCAL STATE
  // ==========================================================================

  const [isLoading, setIsLoading] = useState(true);
  const [selectedPersona, setSelectedPersona] = useState<PersonaEducationContent | null>(null);
  const [expandedCards, setExpandedCards] = useState<Set<string>>(new Set());
  const [showRedFlags, setShowRedFlags] = useState(false);
  const [educationalContent, setEducationalContent] = useState<any>(null);

  // ==========================================================================
  // COMPUTED VALUES
  // ==========================================================================

  const selectedPersonas = vulnerabilityAssessment?.personaSelection?.selectedPersonas || [];
  const selectionReason = vulnerabilityAssessment?.personaSelection?.selectionReason || 'mediumGap';
  const confidenceGap = vulnerabilityAssessment?.confidenceGap?.gap || 0;

  // ==========================================================================
  // EFFECTS
  // ==========================================================================

  useEffect(() => {
    const checkAssessmentData = () => {
      // Check if assessment is complete AND has actual data (same logic as TabbedResultsPage)
      if (!isComplete) {
        console.log('Assessment not complete, redirecting to assessment');
        router.push('/assessment');
        return;
      }

      // Check if we have the necessary data
      if (!answers || answers.length === 0) {
        console.log('No assessment answers found, redirecting to assessment');
        router.push('/assessment');
        return;
      }

      // Check if we have results data
      if (!archetypeResults && !scores) {
        console.log('No results data available, redirecting to assessment');
        router.push('/assessment');
        return;
      }

      // If we get here, we have valid data
      setIsLoading(false);

      // Generate educational content
      if (vulnerabilityAssessment?.personaSelection) {
        const content = generateEducationalContent(vulnerabilityAssessment.personaSelection);
        setEducationalContent(content);

        // Auto-select first persona and expand if specified
        if (content.personaEducation.length > 0) {
          setSelectedPersona(content.personaEducation[0]);

          if (expandedByDefault) {
            setExpandedCards(new Set([content.personaEducation[0].persona.id]));
          }
        }
      }
    };

    // Add a small delay to ensure store is hydrated (same as TabbedResultsPage)
    const timer = setTimeout(checkAssessmentData, 100);
    return () => clearTimeout(timer);
  }, [
    isComplete,
    answers,
    archetypeResults,
    scores,
    vulnerabilityAssessment,
    router,
    expandedByDefault,
  ]);

  // ==========================================================================
  // HANDLERS
  // ==========================================================================

  const handlePersonaSelect = (personaEducation: PersonaEducationContent) => {
    setSelectedPersona(personaEducation);
  };

  const handleCardToggle = (personaId: string) => {
    const newExpanded = new Set(expandedCards);
    if (newExpanded.has(personaId)) {
      newExpanded.delete(personaId);
    } else {
      newExpanded.add(personaId);
    }
    setExpandedCards(newExpanded);
  };

  const handleRetakeAssessment = () => {
    resetAssessment();
    router.push('/assessment');
  };

  // ==========================================================================
  // RENDER HELPERS
  // ==========================================================================

  const renderLoadingState = () => (
    <div className={styles.loadingContainer}>
      <Card className={styles.loadingCard}>
        <div className={styles.loadingContent}>
          <LoadingSpinner size="lg" />
          <h2>Analyzing Vulnerability Patterns...</h2>
          <p>Personalizing your relationship awareness insights</p>
        </div>
      </Card>
    </div>
  );

  const renderHeader = () => (
    <div className={styles.headerSection}>
      <div className={styles.headerContent}>
        <div className={styles.headerIcon}>
          <Shield />
        </div>
        <div className={styles.headerText}>
          <h1>Your Vulnerability Awareness Report</h1>
          <p>
            Based on your <strong>{archetypeResults?.topMatches[0]?.archetype.name}</strong>{' '}
            profile, we've identified <strong>{selectedPersonas.length} key patterns</strong> to be
            aware of in relationships.
          </p>
        </div>
      </div>
    </div>
  );

  const renderSelectionSummary = () => {
    if (!educationalContent) return null;

    return (
      <Card className={styles.summaryCard}>
        <div className={styles.summaryHeader}>
          <Info className={styles.summaryIcon} />
          <h3>Assessment Summary</h3>
        </div>
        <div className={styles.summaryContent}>
          <p>{educationalContent.overviewMessage}</p>
          <div className={styles.summaryStats}>
            <div className={styles.statItem}>
              <span className={styles.statValue}>{selectedPersonas.length}</span>
              <span className={styles.statLabel}>Personas Selected</span>
            </div>
            <div className={styles.statItem}>
              <span className={styles.statValue}>{confidenceGap}%</span>
              <span className={styles.statLabel}>Confidence Gap</span>
            </div>
            <div className={styles.statItem}>
              <span className={styles.statValue}>{selectionReason}</span>
              <span className={styles.statLabel}>Selection Reason</span>
            </div>
          </div>
        </div>
      </Card>
    );
  };

  const renderPersonaCards = () => {
    if (!educationalContent?.personaEducation) return null;

    return (
      <div className={styles.personaCardsSection}>
        <h2>Manipulation Awareness Patterns</h2>
        <div className={styles.personaCardsGrid}>
          {educationalContent.personaEducation.map((personaEducation: PersonaEducationContent) => (
            <Card
              key={personaEducation.persona.id}
              className={`${styles.personaCard} ${
                selectedPersona?.persona.id === personaEducation.persona.id ? styles.selected : ''
              }`}
              onClick={() => handlePersonaSelect(personaEducation)}
            >
              <div className={styles.personaHeader}>
                <div className={styles.personaTitle}>
                  <h4>{personaEducation.persona.persona}</h4>
                  <span className={styles.personaSubtitle}>{personaEducation.persona.title}</span>
                </div>
                <div className={styles.riskBadge}>
                  <AlertTriangle size={16} />
                  {personaEducation.riskLevel}
                </div>
              </div>

              <div className={styles.personaContent}>
                <div className={styles.charactersSection}>
                  <div className={styles.sectionHeader}>
                    <Film size={16} />
                    <span>Pop Culture Examples</span>
                  </div>
                  <div className={styles.charactersList}>
                    {personaEducation.persona.characters.slice(0, 2).map((character, index) => (
                      <span key={index} className={styles.character}>
                        {character}
                      </span>
                    ))}
                    {personaEducation.persona.characters.length > 2 && (
                      <span className={styles.moreCharacters}>
                        +{personaEducation.persona.characters.length - 2} more
                      </span>
                    )}
                  </div>
                </div>

                <div className={styles.patternPreview}>
                  <p className={styles.why}>
                    <strong>Why you're attracted:</strong> {personaEducation.persona.why}
                  </p>
                  <p className={styles.plotTwist}>
                    <strong>The reality:</strong> {personaEducation.persona.plotTwist}
                  </p>
                </div>

                <div className={styles.expandToggle}>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={e => {
                      e.stopPropagation();
                      handleCardToggle(personaEducation.persona.id);
                    }}
                  >
                    {expandedCards.has(personaEducation.persona.id) ? (
                      <>
                        <XCircle size={16} />
                        Hide Details
                      </>
                    ) : (
                      <>
                        <Eye size={16} />
                        Show Details
                      </>
                    )}
                  </Button>
                </div>

                {expandedCards.has(personaEducation.persona.id) && (
                  <div className={styles.expandedContent}>
                    <div className={styles.educationalSection}>
                      <h5>Recognition Signs:</h5>
                      <ul>
                        {personaEducation.educationalSections.recognitionSigns.map(
                          (sign, index) => (
                            <li key={index}>{sign}</li>
                          )
                        )}
                      </ul>
                    </div>

                    <div className={styles.educationalSection}>
                      <h5>Psychology Explained:</h5>
                      <p>{personaEducation.educationalSections.psychologyExplained}</p>
                    </div>

                    <div className={styles.educationalSection}>
                      <h5>Real World Examples:</h5>
                      <ul>
                        {personaEducation.educationalSections.realWorldExamples.map(
                          (example, index) => (
                            <li key={index}>{example}</li>
                          )
                        )}
                      </ul>
                    </div>

                    <div className={styles.educationalSection}>
                      <h5>Protection Tips:</h5>
                      <ul>
                        {personaEducation.educationalSections.protectionTips.map((tip, index) => (
                          <li key={index}>{tip}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                )}
              </div>
            </Card>
          ))}
        </div>
      </div>
    );
  };

  const renderSelectedPersonaDetails = () => {
    if (!selectedPersona) return null;

    return (
      <Card className={styles.selectedPersonaCard}>
        <div className={styles.selectedPersonaHeader}>
          <div className={styles.selectedPersonaTitle}>
            <h3>{selectedPersona.persona.persona}</h3>
            <span className={styles.selectedPersonaSubtitle}>{selectedPersona.persona.title}</span>
          </div>
          <div className={styles.selectedPersonaRisk}>
            <AlertTriangle />
            Risk Level: {selectedPersona.riskLevel}
          </div>
        </div>

        <div className={styles.selectedPersonaContent}>
          <div className={styles.interactiveElements}>
            <div className={styles.elementSection}>
              <h4>
                <Heart />
                What draws you in:
              </h4>
              <p>{selectedPersona.interactiveElements.relatable}</p>
            </div>

            <div className={styles.elementSection}>
              <h4>
                <AlertTriangle />
                Reality check:
              </h4>
              <p>{selectedPersona.interactiveElements.realityCheck}</p>
            </div>

            <div className={styles.elementSection}>
              <h4>
                <Eye />
                Your blind spot:
              </h4>
              <p>{selectedPersona.interactiveElements.blindSpotAwareness}</p>
            </div>

            <div className={styles.elementSection}>
              <h4>
                <Lightbulb />
                Remember this:
              </h4>
              <p className={styles.memorablePhrase}>
                "{selectedPersona.interactiveElements.memorablePhrase}"
              </p>
            </div>
          </div>

          <div className={styles.popCultureSection}>
            <h4>
              <Film />
              Characters like this:
            </h4>
            <div className={styles.charactersList}>
              {selectedPersona.interactiveElements.popCultureConnections.map((character, index) => (
                <span key={index} className={styles.character}>
                  {character}
                </span>
              ))}
            </div>
          </div>
        </div>
      </Card>
    );
  };

  const renderRedFlagsOverlay = () => {
    if (!showRedFlags || !educationalContent) return null;

    return (
      <div className={styles.redFlagsOverlay} onClick={() => setShowRedFlags(false)}>
        <Card className={styles.redFlagsCard} onClick={e => e.stopPropagation()}>
          <div className={styles.redFlagsHeader}>
            <h3>
              <AlertTriangle />
              Key Red Flags
            </h3>
            <Button variant="ghost" onClick={() => setShowRedFlags(false)}>
              <XCircle />
            </Button>
          </div>
          <div className={styles.redFlagsContent}>
            <ul>
              {educationalContent.keyRedFlags.map((flag: string, index: number) => (
                <li key={index}>{flag}</li>
              ))}
            </ul>
          </div>
          <div className={styles.redFlagsFooter}>
            <p>
              <strong>Protection Strategies:</strong>
            </p>
            <ul>
              {educationalContent.protectionStrategies.map((strategy: string, index: number) => (
                <li key={index}>{strategy}</li>
              ))}
            </ul>
          </div>
        </Card>
      </div>
    );
  };

  const renderRedFlagsButton = () => {
    if (!educationalContent) return null;

    return (
      <Card className={styles.redFlagsPreviewCard}>
        <div className={styles.redFlagsPreview}>
          <AlertTriangle className={styles.redFlagsIcon} />
          <div className={styles.redFlagsText}>
            <h4>Key Red Flags to Watch For</h4>
            <p>
              {educationalContent.keyRedFlags.length} warning signs identified for your personality
              type.
            </p>
          </div>
          <Button variant="outline" onClick={() => setShowRedFlags(true)}>
            <Eye />
            View All Red Flags
          </Button>
        </div>
        <div className={styles.confidenceMessage}>
          <p>
            <strong>Confidence Level:</strong> {educationalContent.confidenceMessage}
          </p>
        </div>
        <div className={styles.disclaimer}>
          <p>
            <Info size={16} />
            Trust your instincts and seek professional guidance when needed.
          </p>
        </div>
      </Card>
    );
  };

  const renderActionButtons = () => (
    <div className={styles.actionsSection}>
      <div className={styles.primaryActions}>
        <Button
          variant="cta"
          size="lg"
          onClick={() => router.push('/attraction-patterns')}
          className={styles.continueButton}
        >
          Continue to Attraction Patterns
          <ChevronRight />
        </Button>
      </div>

      <div className={styles.secondaryActions}>
        <Button variant="outline" onClick={() => router.push('/results')}>
          <ChevronLeft />
          Back to Results
        </Button>

        <Button variant="outline" onClick={() => window.print()}>
          <Download />
          Print Report
        </Button>

        <Button variant="secondary" onClick={handleRetakeAssessment}>
          <RefreshCw />
          Retake Assessment
        </Button>

        <Button variant="secondary" onClick={() => router.push('/')}>
          <Home />
          Home
        </Button>
      </div>
    </div>
  );

  // ==========================================================================
  // MAIN RENDER
  // ==========================================================================

  if (isLoading) {
    return (
      <PageLayout maxWidth="lg" centered>
        {renderLoadingState()}
      </PageLayout>
    );
  }

  return (
    <PageLayout maxWidth="xl" className={className}>
      <div className={styles.vulnerabilityContainer}>
        {renderHeader()}
        {renderSelectionSummary()}
        {renderPersonaCards()}
        {renderSelectedPersonaDetails()}
        {renderRedFlagsButton()}
        {renderRedFlagsOverlay()}
        {renderActionButtons()}
      </div>
    </PageLayout>
  );
};

export default VulnerabilityCardsPage;
